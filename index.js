import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import axios from "axios";
import { db } from "./firebase.js";
import cron from "node-cron";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const TONAPI_BASE = "https://tonapi.io/v2";

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
app.post("/api/ton/deposit", async (req, res) => {
  const { userId, walletAddress, amount, intentId } = req.body;

  if (!userId || !walletAddress || !amount || !intentId) {
    return res.status(400).json({ error: "Missing parameters" });
  }

  try {
    const projectWallet = process.env.ADMIN_PROJECT_WALLET;
    const token = process.env.TONAPI_KEY;

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫
    const txResponse = await axios.get(
      `${TONAPI_BASE}/blockchain/accounts/${projectWallet}/transactions?limit=30`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    const transactions = txResponse.data.transactions;

    // ‚úÖ –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏ —Å—É–º–º–µ
    const matched = transactions.find((tx) => {
      const incoming = tx.in_msg;
      return (
        incoming &&
        incoming.source === walletAddress &&
        parseFloat(incoming.value) === parseFloat(amount * 1e9)
      );
    });

    if (!matched) {
      // ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "pending"
      await db.collection("transactions").doc(intentId).set({
        userId,
        wallet: walletAddress,
        amount,
        status: "pending",
        timestamp: new Date(),
      });

      return res.status(200).json({
        status: "pending",
        message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∂–µ.",
      });
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ Firestore
    const userRef = db.collection("telegramUsers").doc(userId);
    await db.runTransaction(async (transaction) => {
      const docSnap = await transaction.get(userRef);
      const data = docSnap.data();
      const current = data?.balance?.TON || 0;

      transaction.update(userRef, {
        [`balance.TON`]: current + amount,
      });
    });

    // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
    await db.collection("transactions").doc(intentId).set({
      userId,
      wallet: walletAddress,
      amount,
      txHash: matched.hash,
      status: "success",
      timestamp: new Date(),
    });

    return res.json({ status: "success", message: "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω" });
  } catch (err) {
    console.error("TONAPI Error:", err.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" });
  }
});

// üîÅ –°–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));

app.get("/ping", (req, res) => res.send("pong"));

// üîÅ –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
cron.schedule("*/2 * * * *", async () => {
  console.log("‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");

  const pendingTxsSnap = await db.collection("transactions")
    .where("status", "==", "pending")
    .get();

  if (pendingTxsSnap.empty) {
    console.log("‚úÖ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.");
    return;
  }

  const projectWallet = process.env.ADMIN_PROJECT_WALLET;
  const token = process.env.TONAPI_KEY;

  const txResponse = await axios.get(
    `https://tonapi.io/v2/blockchain/accounts/${projectWallet}/transactions?limit=50`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  );

  const transactions = txResponse.data.transactions;

  for (const docSnap of pendingTxsSnap.docs) {
    const tx = docSnap.data();
    const intentId = docSnap.id;

    const matched = transactions.find((txData) => {
      const incoming = txData.in_msg;
      return (
        incoming &&
        incoming.source === tx.wallet &&
        parseFloat(incoming.value) === parseFloat(tx.amount * 1e9)
      );
    });

    if (matched) {
      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const userRef = db.collection("telegramUsers").doc(tx.userId);
      await db.runTransaction(async (transaction) => {
        const userSnap = await transaction.get(userRef);
        const userData = userSnap.data();
        const currentBalance = userData?.balance?.TON || 0;

        transaction.update(userRef, {
          [`balance.TON`]: currentBalance + tx.amount,
        });
      });

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await db.collection("transactions").doc(intentId).update({
        status: "success",
        txHash: matched.hash,
        updatedAt: new Date(),
      });

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${intentId}`);
    }
  }

  console.log("üîÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.");
});
